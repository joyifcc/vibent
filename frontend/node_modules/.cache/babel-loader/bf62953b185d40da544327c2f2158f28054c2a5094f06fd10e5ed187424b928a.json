{"ast":null,"code":"import { DateTime } from \"luxon\";\nconst stateToAirports = {\n  \"Alabama\": [\"BHM\", \"HSV\", \"MGM\", \"MOB\"],\n  // Birmingham, Huntsville, Montgomery, Mobile\n  \"Alaska\": [\"ANC\", \"FAI\", \"JNU\", \"SEA\"],\n  // Anchorage, Fairbanks, Juneau, plus Seattle (common hub)\n  \"Arizona\": [\"PHX\", \"TUS\", \"SDL\"],\n  // Phoenix, Tucson, Scottsdale (private/charter)\n  \"Arkansas\": [\"XNA\", \"LIT\", \"FSM\"],\n  // Northwest Arkansas, Little Rock, Fort Smith\n  \"California\": [\"LAX\", \"SFO\", \"SAN\", \"SJC\", \"OAK\", \"SMF\", \"BUR\", \"ONT\", \"SNA\", \"LGB\"],\n  // Major CA airports\n  \"Colorado\": [\"DEN\", \"COS\", \"GJT\"],\n  // Denver, Colorado Springs, Grand Junction\n  \"Connecticut\": [\"BDL\", \"HVN\"],\n  // Bradley (Hartford), Tweed New Haven\n  \"Delaware\": [\"ILG\"],\n  // Wilmington (small, near Philadelphia)\n  \"District of Columbia\": [\"DCA\", \"IAD\", \"BWI\"],\n  // Reagan, Dulles, Baltimore-Washington\n  \"Florida\": [\"MIA\", \"FLL\", \"TPA\", \"MCO\", \"RSW\", \"JAX\", \"PBI\"],\n  // Miami, Fort Lauderdale, Tampa, Orlando, Southwest Florida, Jacksonville, Palm Beach\n  \"Georgia\": [\"ATL\", \"SAV\", \"AGS\", \"MCN\"],\n  // Atlanta, Savannah, Augusta, Macon\n  \"Hawaii\": [\"HNL\", \"OGG\", \"KOA\", \"LIH\"],\n  // Honolulu, Maui, Kona, Lihue\n  \"Idaho\": [\"BOI\", \"IDA\"],\n  // Boise, Idaho Falls\n  \"Illinois\": [\"ORD\", \"MDW\", \"SPI\", \"RFD\"],\n  // Oâ€™Hare, Midway, Springfield, Rockford\n  \"Indiana\": [\"IND\", \"SBN\"],\n  // Indianapolis, South Bend\n  \"Iowa\": [\"DSM\", \"CID\", \"MLI\"],\n  // Des Moines, Cedar Rapids, Moline\n  \"Kansas\": [\"ICT\", \"MCI\", \"FOE\"],\n  // Wichita, Kansas City, Topeka\n  \"Kentucky\": [\"CVG\", \"SDF\", \"LEX\"],\n  // Cincinnati/Northern KY, Louisville, Lexington\n  \"Louisiana\": [\"MSY\", \"BTR\", \"LFT\"],\n  // New Orleans, Baton Rouge, Lafayette\n  \"Maine\": [\"PWM\", \"BGR\"],\n  // Portland, Bangor\n  \"Maryland\": [\"BWI\", \"MTN\"],\n  // Baltimore-Washington, Martin State\n  \"Massachusetts\": [\"BOS\", \"ORH\", \"EWB\"],\n  // Boston Logan, Worcester, New Bedford\n  \"Michigan\": [\"DTW\", \"GRR\", \"MBS\", \"AZO\"],\n  // Detroit, Grand Rapids, Saginaw, Kalamazoo\n  \"Minnesota\": [\"MSP\", \"DLH\", \"RST\"],\n  // Minneapolis-St Paul, Duluth, Rochester\n  \"Mississippi\": [\"JAN\", \"GPT\"],\n  // Jackson, Gulfport\n  \"Missouri\": [\"STL\", \"MCI\", \"SGF\"],\n  // St. Louis, Kansas City, Springfield\n  \"Montana\": [\"BIL\", \"GTF\", \"MSO\"],\n  // Billings, Great Falls, Missoula\n  \"Nebraska\": [\"OMA\", \"LNK\"],\n  // Omaha, Lincoln\n  \"Nevada\": [\"LAS\", \"RNO\"],\n  // Las Vegas, Reno\n  \"New Hampshire\": [\"MHT\", \"CON\"],\n  // Manchester, Concord (small)\n  \"New Jersey\": [\"EWR\", \"ACY\", \"TTN\"],\n  // Newark, Atlantic City, Trenton-Mercer\n  \"New Mexico\": [\"ABQ\", \"SRR\"],\n  // Albuquerque, Santa Rosa (small)\n  \"New York\": [\"JFK\", \"LGA\", \"EWR\", \"BUF\", \"ROC\", \"SYR\", \"ALB\"],\n  // JFK, LaGuardia, Newark, Buffalo, Rochester, Syracuse, Albany\n  \"North Carolina\": [\"CLT\", \"RDU\", \"GSO\", \"ILM\"],\n  // Charlotte, Raleigh-Durham, Greensboro, Wilmington\n  \"North Dakota\": [\"FAR\", \"GFK\"],\n  // Fargo, Grand Forks\n  \"Ohio\": [\"CLE\", \"CMH\", \"CVG\", \"DAY\"],\n  // Cleveland, Columbus, Cincinnati, Dayton\n  \"Oklahoma\": [\"OKC\", \"TUL\"],\n  // Oklahoma City, Tulsa\n  \"Oregon\": [\"PDX\", \"EUG\"],\n  // Portland, Eugene\n  \"Pennsylvania\": [\"PHL\", \"PIT\", \"AVP\", \"MDT\"],\n  // Philadelphia, Pittsburgh, Wilkes-Barre/Scranton, Harrisburg\n  \"Rhode Island\": [\"PVD\"],\n  // Providence\n  \"South Carolina\": [\"CHS\", \"GSP\", \"CAE\"],\n  // Charleston, Greenville-Spartanburg, Columbia\n  \"South Dakota\": [\"FSD\", \"RAP\"],\n  // Sioux Falls, Rapid City\n  \"Tennessee\": [\"BNA\", \"MEM\", \"CHA\"],\n  // Nashville, Memphis, Chattanooga\n  \"Texas\": [\"DFW\", \"IAH\", \"AUS\", \"SAT\", \"DAL\", \"HOU\"],\n  // Dallas-Fort Worth, Houston, Austin, San Antonio, Dallas Love, Houston Hobby\n  \"Utah\": [\"SLC\", \"PVU\"],\n  // Salt Lake City, Provo (small)\n  \"Vermont\": [\"BTV\"],\n  // Burlington\n  \"Virginia\": [\"DCA\", \"ORF\", \"RIC\"],\n  // Reagan, Norfolk, Richmond\n  \"Washington\": [\"SEA\", \"GEG\", \"PDX\"],\n  // Seattle, Spokane, Portland (nearby)\n  \"West Virginia\": [\"CRW\", \"HTS\"],\n  // Charleston, Huntington\n  \"Wisconsin\": [\"MKE\", \"MSN\", \"GRB\"],\n  // Milwaukee, Madison, Green Bay\n  \"Wyoming\": [\"JAC\"] // Jackson Hole\n};\nconst airlineNames = {\n  \"6X\": \"Amadeus Six\",\n  \"PR\": \"Philippine Airlines\",\n  \"AA\": \"American Airlines\",\n  \"DL\": \"Delta Air Lines\",\n  \"UA\": \"United Airlines\",\n  \"WN\": \"Southwest Airlines\",\n  \"AS\": \"Alaska Airlines\",\n  \"B6\": \"JetBlue Airways\",\n  \"AF\": \"Air France\",\n  \"LH\": \"Lufthansa\",\n  \"EK\": \"Emirates\",\n  \"AC\": \"Air Canada\",\n  \"BA\": \"British Airways\",\n  \"CX\": \"Cathay Pacific\",\n  \"QF\": \"Qantas\",\n  \"SQ\": \"Singapore Airlines\",\n  \"JL\": \"Japan Airlines\",\n  \"NH\": \"All Nippon Airways\",\n  \"IB\": \"Iberia\",\n  \"AZ\": \"Alitalia\",\n  \"KL\": \"KLM Royal Dutch Airlines\",\n  \"TK\": \"Turkish Airlines\",\n  \"SA\": \"South African Airways\",\n  \"NZ\": \"Air New Zealand\",\n  \"EY\": \"Etihad Airways\",\n  \"QR\": \"Qatar Airways\",\n  \"MS\": \"EgyptAir\",\n  \"CX\": \"Cathay Pacific\",\n  \"FI\": \"Icelandair\",\n  \"DL\": \"Delta Air Lines\",\n  \"F9\": \"Frontier Airlines\",\n  \"G4\": \"Allegiant Air\",\n  \"HA\": \"Hawaiian Airlines\",\n  \"VX\": \"Virgin America\",\n  \"WN\": \"Southwest Airlines\",\n  \"YV\": \"Mesa Airlines\"\n};\nconst formatWithTimezone = (dateTimeStr, state) => {\n  const stateTimezones = {\n    \"Alabama\": \"America/Chicago\",\n    \"Alaska\": \"America/Anchorage\",\n    \"Arizona\": \"America/Phoenix\",\n    \"Arkansas\": \"America/Chicago\",\n    \"California\": \"America/Los_Angeles\",\n    \"Colorado\": \"America/Denver\",\n    \"Connecticut\": \"America/New_York\",\n    \"Delaware\": \"America/New_York\",\n    \"District of Columbia\": \"America/New_York\",\n    \"Florida\": \"America/New_York\",\n    // see note below\n    \"Georgia\": \"America/New_York\",\n    \"Hawaii\": \"Pacific/Honolulu\",\n    \"Idaho\": \"America/Boise\",\n    // mostly Mountain Time\n    \"Illinois\": \"America/Chicago\",\n    \"Indiana\": \"America/Indiana/Indianapolis\",\n    // mostly Eastern\n    \"Iowa\": \"America/Chicago\",\n    \"Kansas\": \"America/Chicago\",\n    // some parts Mountain Time, but mostly Chicago\n    \"Kentucky\": \"America/New_York\",\n    // mostly Eastern\n    \"Louisiana\": \"America/Chicago\",\n    \"Maine\": \"America/New_York\",\n    \"Maryland\": \"America/New_York\",\n    \"Massachusetts\": \"America/New_York\",\n    \"Michigan\": \"America/Detroit\",\n    // Eastern time\n    \"Minnesota\": \"America/Chicago\",\n    \"Mississippi\": \"America/Chicago\",\n    \"Missouri\": \"America/Chicago\",\n    \"Montana\": \"America/Denver\",\n    \"Nebraska\": \"America/Chicago\",\n    // parts in Mountain Time, but mostly Chicago\n    \"Nevada\": \"America/Los_Angeles\",\n    // parts in Mountain Time\n    \"New Hampshire\": \"America/New_York\",\n    \"New Jersey\": \"America/New_York\",\n    \"New Mexico\": \"America/Denver\",\n    \"New York\": \"America/New_York\",\n    \"North Carolina\": \"America/New_York\",\n    \"North Dakota\": \"America/Chicago\",\n    // parts Mountain Time but mostly Chicago\n    \"Ohio\": \"America/New_York\",\n    \"Oklahoma\": \"America/Chicago\",\n    \"Oregon\": \"America/Los_Angeles\",\n    // some parts in Mountain Time\n    \"Pennsylvania\": \"America/New_York\",\n    \"Rhode Island\": \"America/New_York\",\n    \"South Carolina\": \"America/New_York\",\n    \"South Dakota\": \"America/Chicago\",\n    // parts Mountain Time but mostly Chicago\n    \"Tennessee\": \"America/Chicago\",\n    // mostly Central Time (East Tennessee is Eastern)\n    \"Texas\": \"America/Chicago\",\n    // mostly Central, but West Texas is Mountain Time\n    \"Utah\": \"America/Denver\",\n    \"Vermont\": \"America/New_York\",\n    \"Virginia\": \"America/New_York\",\n    \"Washington\": \"America/Los_Angeles\",\n    \"West Virginia\": \"America/New_York\",\n    \"Wisconsin\": \"America/Chicago\",\n    \"Wyoming\": \"America/Denver\"\n  };\n  const timezone = stateTimezones[state] || \"UTC\";\n  return DateTime.fromISO(dateTimeStr).setZone(timezone).toFormat(\"MMM dd, yyyy hh:mm a ZZZZ\");\n};\nconst airportToState = {};\nObject.entries(stateToAirports).forEach(([state, airports]) => {\n  airports.forEach(code => {\n    airportToState[code] = state;\n  });\n});\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nexport async function fetchFlights(origin, destination, departureDate) {\n  const res = await fetch(`${BACKEND_URL}/flights?origin=${origin}&destination=${destination}&departureDate=${departureDate}`);\n  if (!res.ok) throw new Error(`Flights API returned ${res.status}`);\n  return res.json();\n}\nexport { stateToAirports, airlineNames, formatWithTimezone, airportToState };","map":{"version":3,"names":["DateTime","stateToAirports","airlineNames","formatWithTimezone","dateTimeStr","state","stateTimezones","timezone","fromISO","setZone","toFormat","airportToState","Object","entries","forEach","airports","code","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","fetchFlights","origin","destination","departureDate","res","fetch","ok","Error","status","json"],"sources":["/Users/joyzhang/vibent/frontend/src/components/utils.js"],"sourcesContent":["import { DateTime } from \"luxon\";\n\nconst stateToAirports = {\n  \"Alabama\": [\"BHM\", \"HSV\", \"MGM\", \"MOB\"], // Birmingham, Huntsville, Montgomery, Mobile\n  \"Alaska\": [\"ANC\", \"FAI\", \"JNU\", \"SEA\"], // Anchorage, Fairbanks, Juneau, plus Seattle (common hub)\n  \"Arizona\": [\"PHX\", \"TUS\", \"SDL\"], // Phoenix, Tucson, Scottsdale (private/charter)\n  \"Arkansas\": [\"XNA\", \"LIT\", \"FSM\"], // Northwest Arkansas, Little Rock, Fort Smith\n  \"California\": [\"LAX\", \"SFO\", \"SAN\", \"SJC\", \"OAK\", \"SMF\", \"BUR\", \"ONT\", \"SNA\", \"LGB\"], // Major CA airports\n  \"Colorado\": [\"DEN\", \"COS\", \"GJT\"], // Denver, Colorado Springs, Grand Junction\n  \"Connecticut\": [\"BDL\", \"HVN\"], // Bradley (Hartford), Tweed New Haven\n  \"Delaware\": [\"ILG\"], // Wilmington (small, near Philadelphia)\n  \"District of Columbia\": [\"DCA\", \"IAD\", \"BWI\"], // Reagan, Dulles, Baltimore-Washington\n  \"Florida\": [\"MIA\", \"FLL\", \"TPA\", \"MCO\", \"RSW\", \"JAX\", \"PBI\"], // Miami, Fort Lauderdale, Tampa, Orlando, Southwest Florida, Jacksonville, Palm Beach\n  \"Georgia\": [\"ATL\", \"SAV\", \"AGS\", \"MCN\"], // Atlanta, Savannah, Augusta, Macon\n  \"Hawaii\": [\"HNL\", \"OGG\", \"KOA\", \"LIH\"], // Honolulu, Maui, Kona, Lihue\n  \"Idaho\": [\"BOI\", \"IDA\"], // Boise, Idaho Falls\n  \"Illinois\": [\"ORD\", \"MDW\", \"SPI\", \"RFD\"], // Oâ€™Hare, Midway, Springfield, Rockford\n  \"Indiana\": [\"IND\", \"SBN\"], // Indianapolis, South Bend\n  \"Iowa\": [\"DSM\", \"CID\", \"MLI\"], // Des Moines, Cedar Rapids, Moline\n  \"Kansas\": [\"ICT\", \"MCI\", \"FOE\"], // Wichita, Kansas City, Topeka\n  \"Kentucky\": [\"CVG\", \"SDF\", \"LEX\"], // Cincinnati/Northern KY, Louisville, Lexington\n  \"Louisiana\": [\"MSY\", \"BTR\", \"LFT\"], // New Orleans, Baton Rouge, Lafayette\n  \"Maine\": [\"PWM\", \"BGR\"], // Portland, Bangor\n  \"Maryland\": [\"BWI\", \"MTN\"], // Baltimore-Washington, Martin State\n  \"Massachusetts\": [\"BOS\", \"ORH\", \"EWB\"], // Boston Logan, Worcester, New Bedford\n  \"Michigan\": [\"DTW\", \"GRR\", \"MBS\", \"AZO\"], // Detroit, Grand Rapids, Saginaw, Kalamazoo\n  \"Minnesota\": [\"MSP\", \"DLH\", \"RST\"], // Minneapolis-St Paul, Duluth, Rochester\n  \"Mississippi\": [\"JAN\", \"GPT\"], // Jackson, Gulfport\n  \"Missouri\": [\"STL\", \"MCI\", \"SGF\"], // St. Louis, Kansas City, Springfield\n  \"Montana\": [\"BIL\", \"GTF\", \"MSO\"], // Billings, Great Falls, Missoula\n  \"Nebraska\": [\"OMA\", \"LNK\"], // Omaha, Lincoln\n  \"Nevada\": [\"LAS\", \"RNO\"], // Las Vegas, Reno\n  \"New Hampshire\": [\"MHT\", \"CON\"], // Manchester, Concord (small)\n  \"New Jersey\": [\"EWR\", \"ACY\", \"TTN\"], // Newark, Atlantic City, Trenton-Mercer\n  \"New Mexico\": [\"ABQ\", \"SRR\"], // Albuquerque, Santa Rosa (small)\n  \"New York\": [\"JFK\", \"LGA\", \"EWR\", \"BUF\", \"ROC\", \"SYR\", \"ALB\"], // JFK, LaGuardia, Newark, Buffalo, Rochester, Syracuse, Albany\n  \"North Carolina\": [\"CLT\", \"RDU\", \"GSO\", \"ILM\"], // Charlotte, Raleigh-Durham, Greensboro, Wilmington\n  \"North Dakota\": [\"FAR\", \"GFK\"], // Fargo, Grand Forks\n  \"Ohio\": [\"CLE\", \"CMH\", \"CVG\", \"DAY\"], // Cleveland, Columbus, Cincinnati, Dayton\n  \"Oklahoma\": [\"OKC\", \"TUL\"], // Oklahoma City, Tulsa\n  \"Oregon\": [\"PDX\", \"EUG\"], // Portland, Eugene\n  \"Pennsylvania\": [\"PHL\", \"PIT\", \"AVP\", \"MDT\"], // Philadelphia, Pittsburgh, Wilkes-Barre/Scranton, Harrisburg\n  \"Rhode Island\": [\"PVD\"], // Providence\n  \"South Carolina\": [\"CHS\", \"GSP\", \"CAE\"], // Charleston, Greenville-Spartanburg, Columbia\n  \"South Dakota\": [\"FSD\", \"RAP\"], // Sioux Falls, Rapid City\n  \"Tennessee\": [\"BNA\", \"MEM\", \"CHA\"], // Nashville, Memphis, Chattanooga\n  \"Texas\": [\"DFW\", \"IAH\", \"AUS\", \"SAT\", \"DAL\", \"HOU\"], // Dallas-Fort Worth, Houston, Austin, San Antonio, Dallas Love, Houston Hobby\n  \"Utah\": [\"SLC\", \"PVU\"], // Salt Lake City, Provo (small)\n  \"Vermont\": [\"BTV\"], // Burlington\n  \"Virginia\": [\"DCA\", \"ORF\", \"RIC\"], // Reagan, Norfolk, Richmond\n  \"Washington\": [\"SEA\", \"GEG\", \"PDX\"], // Seattle, Spokane, Portland (nearby)\n  \"West Virginia\": [\"CRW\", \"HTS\"], // Charleston, Huntington\n  \"Wisconsin\": [\"MKE\", \"MSN\", \"GRB\"], // Milwaukee, Madison, Green Bay\n  \"Wyoming\": [\"JAC\"], // Jackson Hole\n};\n\nconst airlineNames = {\n  \"6X\": \"Amadeus Six\",\n  \"PR\": \"Philippine Airlines\",\n  \"AA\": \"American Airlines\",\n  \"DL\": \"Delta Air Lines\",\n  \"UA\": \"United Airlines\",\n  \"WN\": \"Southwest Airlines\",\n  \"AS\": \"Alaska Airlines\",\n  \"B6\": \"JetBlue Airways\",\n  \"AF\": \"Air France\",\n  \"LH\": \"Lufthansa\",\n  \"EK\": \"Emirates\",\n  \"AC\": \"Air Canada\",\n  \"BA\": \"British Airways\",\n  \"CX\": \"Cathay Pacific\",\n  \"QF\": \"Qantas\",\n  \"SQ\": \"Singapore Airlines\",\n  \"JL\": \"Japan Airlines\",\n  \"NH\": \"All Nippon Airways\",\n  \"IB\": \"Iberia\",\n  \"AZ\": \"Alitalia\",\n  \"KL\": \"KLM Royal Dutch Airlines\",\n  \"TK\": \"Turkish Airlines\",\n  \"SA\": \"South African Airways\",\n  \"NZ\": \"Air New Zealand\",\n  \"EY\": \"Etihad Airways\",\n  \"QR\": \"Qatar Airways\",\n  \"MS\": \"EgyptAir\",\n  \"CX\": \"Cathay Pacific\",\n  \"FI\": \"Icelandair\",\n  \"DL\": \"Delta Air Lines\",\n  \"F9\": \"Frontier Airlines\",\n  \"G4\": \"Allegiant Air\",\n  \"HA\": \"Hawaiian Airlines\",\n  \"VX\": \"Virgin America\",\n  \"WN\": \"Southwest Airlines\",\n  \"YV\": \"Mesa Airlines\",\n};\n\nconst formatWithTimezone = (dateTimeStr, state) => {\n  const stateTimezones = {\n    \"Alabama\": \"America/Chicago\",\n    \"Alaska\": \"America/Anchorage\",\n    \"Arizona\": \"America/Phoenix\",\n    \"Arkansas\": \"America/Chicago\",\n    \"California\": \"America/Los_Angeles\",\n    \"Colorado\": \"America/Denver\",\n    \"Connecticut\": \"America/New_York\",\n    \"Delaware\": \"America/New_York\",\n    \"District of Columbia\": \"America/New_York\",\n    \"Florida\": \"America/New_York\", // see note below\n    \"Georgia\": \"America/New_York\",\n    \"Hawaii\": \"Pacific/Honolulu\",\n    \"Idaho\": \"America/Boise\", // mostly Mountain Time\n    \"Illinois\": \"America/Chicago\",\n    \"Indiana\": \"America/Indiana/Indianapolis\", // mostly Eastern\n    \"Iowa\": \"America/Chicago\",\n    \"Kansas\": \"America/Chicago\", // some parts Mountain Time, but mostly Chicago\n    \"Kentucky\": \"America/New_York\", // mostly Eastern\n    \"Louisiana\": \"America/Chicago\",\n    \"Maine\": \"America/New_York\",\n    \"Maryland\": \"America/New_York\",\n    \"Massachusetts\": \"America/New_York\",\n    \"Michigan\": \"America/Detroit\", // Eastern time\n    \"Minnesota\": \"America/Chicago\",\n    \"Mississippi\": \"America/Chicago\",\n    \"Missouri\": \"America/Chicago\",\n    \"Montana\": \"America/Denver\",\n    \"Nebraska\": \"America/Chicago\", // parts in Mountain Time, but mostly Chicago\n    \"Nevada\": \"America/Los_Angeles\", // parts in Mountain Time\n    \"New Hampshire\": \"America/New_York\",\n    \"New Jersey\": \"America/New_York\",\n    \"New Mexico\": \"America/Denver\",\n    \"New York\": \"America/New_York\",\n    \"North Carolina\": \"America/New_York\",\n    \"North Dakota\": \"America/Chicago\", // parts Mountain Time but mostly Chicago\n    \"Ohio\": \"America/New_York\",\n    \"Oklahoma\": \"America/Chicago\",\n    \"Oregon\": \"America/Los_Angeles\", // some parts in Mountain Time\n    \"Pennsylvania\": \"America/New_York\",\n    \"Rhode Island\": \"America/New_York\",\n    \"South Carolina\": \"America/New_York\",\n    \"South Dakota\": \"America/Chicago\", // parts Mountain Time but mostly Chicago\n    \"Tennessee\": \"America/Chicago\", // mostly Central Time (East Tennessee is Eastern)\n    \"Texas\": \"America/Chicago\", // mostly Central, but West Texas is Mountain Time\n    \"Utah\": \"America/Denver\",\n    \"Vermont\": \"America/New_York\",\n    \"Virginia\": \"America/New_York\",\n    \"Washington\": \"America/Los_Angeles\",\n    \"West Virginia\": \"America/New_York\",\n    \"Wisconsin\": \"America/Chicago\",\n    \"Wyoming\": \"America/Denver\"\n  };\n\n  const timezone = stateTimezones[state] || \"UTC\";\n  return DateTime.fromISO(dateTimeStr) \n    .setZone(timezone)\n    .toFormat(\"MMM dd, yyyy hh:mm a ZZZZ\");\n};\n\n\nconst airportToState = {};\n          Object.entries(stateToAirports).forEach(([state, airports]) => {\n            airports.forEach(code => { airportToState[code] = state; });\n          });\n\n          const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\n\n          export async function fetchFlights(origin, destination, departureDate) {\n            const res = await fetch(\n              `${BACKEND_URL}/flights?origin=${origin}&destination=${destination}&departureDate=${departureDate}`\n            );\n            \n            if (!res.ok) throw new Error(`Flights API returned ${res.status}`);\n            return res.json();\n          }\n\n\n\nexport {\n    stateToAirports,\n    airlineNames,\n    formatWithTimezone,\n    airportToState\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}